function generate_RNA_stem_library(stem,reso)
% function generate_RNA_stem_library(stem,reso)
%
% uses a set of RNA segment PDB files and
% creates a library of stem segments
% user is prompted for identifying the files
%
% the library is for later use in RigiFlex and contains
%   a paradigm PDB file (for the first entry)
%   coordinate sets for the other entries
%
% the set of RNA segment PDB files can be generated by the Rosetta server
% Rosie FarFar: http://rosie.graylab.jhu.edu/documentation/rna_denovo
%
% all PDB files of the RNA segments must be in the same directory and this
% directory must not contain any other file with extension .pdb
%
% stem  nucleotide indices for the stem, for instance: [1-7 31:-1:25]
% reso  library resolution [Å], maximum coordinate rmsd between stem
%       structures grouped into one cluster
%
% G. Jeschke, 16.10.2017

hist = zeros(360);

mydir = pwd;
[fname,pname]=uigetfile('*.pdb','Select paradigm RNA segment PDB file');
if isequal(fname,0) || isequal(pname,0)
    add_msg_board('RNA stem library generation cancelled by user');
    return
else
    [msg,snum] = add_pdb(fullfile(pname,fname));
    if msg.error
        add_msg_board(sprintf('ERROR in reading paradigm PDB file: %s. Aborting.',msg.text));
        return
    end
    RNA_stag = sprintf('[%i]',snum);
    RNA_snum = snum;
    cd(pname);
    if ~exist('sel','var') || isempty(sel)
        RNA_list = dir('*.pdb');
    else
        for ks = 1:length(sel)
            mtag = sprintf('%i',sel(ks));
            preamb = 'R_000000';
            RNA_list(ks).name = sprintf('%s%s.pdb',preamb(1:8-length(mtag)),mtag);
        end
    end
end
ndecoys = length(RNA_list); 
set(gcf,'Pointer','watch');
stag = mk_address_parts(snum);
stem_nt = sort(stem);
adr = sprintf('[%s]%i',stag,stem_nt(1));
hist = add_pseudo_torsion(hist,stag,stem,mydir);
for k = 2:length(stem_nt)
    adr = sprintf('%s,%i',adr,stem_nt(k));
end
[msg,coor_set] = get_object(adr,'xyz_paradigm');
if msg.error
    add_msg_board(sprintf('ERROR: Coordinates could not be retrieved for %s (%s). Aborting.',adr,msg.text));
    cd(mydir);
    set(gcf,'Pointer','arrow');
    return
end
nat = 0;
for k = 1:length(coor_set)
    [ncat,~] = size(coor_set{k});
    nat = nat + ncat;
end
rcoor = zeros(nat,3);
nat1 = nat;
nat = 0;
for k = 1:length(coor_set)
    [ncat,~] = size(coor_set{k});
    rcoor(nat+1:nat+ncat,:) = coor_set{k};
    nat = nat + ncat;
end
coor_sets = cell(1,ndecoys);
coor_sets{1} = rcoor;
dmat = zeros(ndecoys);
tic,
for kd = 2:ndecoys
    [msg,snum] = add_pdb(RNA_list(kd).name);
    if msg.error
        add_msg_board(sprintf('ERROR: PDB file %s could not be read (%s). Aborting.',RNA_list(kd).name,msg.text));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    stag = mk_address_parts(snum);
    hist = add_pseudo_torsion(hist,stag,stem,mydir);
    adr = sprintf('[%s]%i',stag,stem_nt(1));
    for k = 2:length(stem_nt)
        adr = sprintf('%s,%i',adr,stem_nt(k));
    end
    [msg,coor_set] = get_object(adr,'xyz_paradigm');
    if msg.error
        add_msg_board(sprintf('ERROR: Coordinates could not be retrieved for %s (%s). Aborting.',adr,msg.text));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    nat = 0;
    for k = 1:length(coor_set)
        [ncat,~] = size(coor_set{k});
        nat = nat + ncat;
    end
    if nat ~= nat1
        add_msg_board(sprintf('ERROR: Mismatch of number of atoms between %s and paradigm structure. Aborting.',adr));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    rcoor = zeros(nat,3);
    nat = 0;
    for k = 1:length(coor_set)
        [ncat,~] = size(coor_set{k});
        rcoor(nat+1:nat+ncat,:) = coor_set{k};
        nat = nat + ncat;
    end
    coor_sets{kd} = rcoor;
    for kd2 = 1:kd-1
        [rmsd,coor2] = rmsd_superimpose(coor_sets{kd2},coor_sets{kd});
        if kd2 == 1
            coor_sets{kd} = coor2;
        end
        dmat(kd,kd2) = rmsd;
        dmat(kd2,kd) = rmsd;
    end
end
unassigned = ndecoys;
assignment = cell(1,ndecoys);
central = zeros(1,ndecoys);
apoi = 0;
dmat0 = dmat;
while unassigned > 0
    apoi = apoi + 1;
    cassign = zeros(1,unassigned);
    % determine central structure
    [~,poi] = min(sum(dmat.^2));
    cassign(1) = poi;
    cpoi = 1;
    for k = 1:unassigned
        if k ~= poi
            if dmat(k,poi) <= reso
                cpoi = cpoi + 1;
                cassign(cpoi) = k;
            end
        end
    end
    ua0 = unassigned;
    unassigned = unassigned - cpoi;
    cassign = cassign(1:cpoi);
    assignment{apoi} = cassign;
    fprintf(1,'Cluster %i combines %i stem models\n',apoi,cpoi);
    % Determine central structure of the cluster
    cdmat = zeros(cpoi);
    for k1 = 1:cpoi-1
        for k2 = k1+1:cpoi
            cdmat(k1,k2) = dmat(cassign(k1),cassign(k2));
            cdmat(k2,k1) = cdmat(k1,k2);
        end
    end
    [~,ccpoi] = min(sum(dmat.^2));
    central(apoi) = ccpoi;
    % cull distance matrix
    ivec = zeros(1,unassigned);
    ipoi = 0;
    for k = 1:ua0
        if min(abs(cassign-k)) > 0 % this structure has not yet been assigned
            ipoi = ipoi+1;
            ivec(ipoi) = k;
        end
    end
    dmat = dmat(ivec,ivec);
end
assignment = assignment(1:apoi);
clusters = cell(1,apoi);
for k = 1:apoi
    cassign = assignment{k};
    clusters{k} = coor_sets{cassign(1)};
end
toc,
set(gcf,'Pointer','arrow');
etaax = 0:359;
thetaax = etaax;
vmax = max(max(hist));
v = 0.05:0.05:0.95;
hist = hist/vmax;
figure(1); clf;
contourf(etaax,thetaax,hist,v);
colormap(hot);
invhot = flipud(colormap);
colormap(invhot);

disp('Finished');

function hist = add_pseudo_torsion(hist,stag,stem,mydir)

stlen = length(stem)/2;

for k = 2:stlen-1
    adr = sprintf('[%s]%i.C4''',stag,stem(k-1));
    [msg,C4pm] = get_object(adr,'coor');
    if msg.error
        add_msg_board(sprintf('ERROR: Coordinates could not be retrieved for %s (%s). Aborting.',adr,msg.text));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    adr = sprintf('[%s]%i.P',stag,stem(k));
    [msg,P] = get_object(adr,'coor');
    if msg.error
        add_msg_board(sprintf('ERROR: Coordinates could not be retrieved for %s (%s). Aborting.',adr,msg.text));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    adr = sprintf('[%s]%i.C4''',stag,stem(k));
    [msg,C4p] = get_object(adr,'coor');
    if msg.error
        add_msg_board(sprintf('ERROR: Coordinates could not be retrieved for %s (%s). Aborting.',adr,msg.text));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    adr = sprintf('[%s]%i.P',stag,stem(k+1));
    [msg,Pp] = get_object(adr,'coor');
    if msg.error
        add_msg_board(sprintf('ERROR: Coordinates could not be retrieved for %s (%s). Aborting.',adr,msg.text));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    adr = sprintf('[%s]%i.C4''',stag,stem(k+1));
    [msg,C4pp] = get_object(adr,'coor');
    if msg.error
        add_msg_board(sprintf('ERROR: Coordinates could not be retrieved for %s (%s). Aborting.',adr,msg.text));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    eta = 1 + round(180+180*dihedral_fast(C4pm,P,C4p,Pp)/pi);
    theta = 1 + round(180+180*dihedral_fast(P,C4p,Pp,C4pp)/pi);
    if eta == 361, eta = 1; end
    if theta == 361, theta = 1; end
    hist(eta,theta) = hist(eta,theta) + 1;
end

for k = stlen+1:length(stem)-1
    adr = sprintf('[%s]%i.C4''',stag,stem(k-1));
    [msg,C4pm] = get_object(adr,'coor');
    if msg.error
        add_msg_board(sprintf('ERROR: Coordinates could not be retrieved for %s (%s). Aborting.',adr,msg.text));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    adr = sprintf('[%s]%i.P',stag,stem(k));
    [msg,P] = get_object(adr,'coor');
    if msg.error
        add_msg_board(sprintf('ERROR: Coordinates could not be retrieved for %s (%s). Aborting.',adr,msg.text));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    adr = sprintf('[%s]%i.C4''',stag,stem(k));
    [msg,C4p] = get_object(adr,'coor');
    if msg.error
        add_msg_board(sprintf('ERROR: Coordinates could not be retrieved for %s (%s). Aborting.',adr,msg.text));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    adr = sprintf('[%s]%i.P',stag,stem(k+1));
    [msg,Pp] = get_object(adr,'coor');
    if msg.error
        add_msg_board(sprintf('ERROR: Coordinates could not be retrieved for %s (%s). Aborting.',adr,msg.text));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    adr = sprintf('[%s]%i.C4''',stag,stem(k+1));
    [msg,C4pp] = get_object(adr,'coor');
    if msg.error
        add_msg_board(sprintf('ERROR: Coordinates could not be retrieved for %s (%s). Aborting.',adr,msg.text));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    eta = 1 + round(180+180*dihedral_fast(C4pm,P,C4p,Pp)/pi);
    theta = 1 + round(180+180*dihedral_fast(P,C4p,Pp,C4pp)/pi);
    if eta == 361, eta = 1; end
    if theta == 361, theta = 1; end
    hist(eta,theta) = hist(eta,theta) + 1;
end