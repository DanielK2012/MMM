function generate_RNA_stem_library
% function generate_RNA_stem_library
%
% uses a set of RNA segment PDB files and
% creates a library of stem segments
% user is prompted for identifying the files
%
% the library is for later use in RigiFlex and contains
%   a paradigm PDB file (for the first entry)
%   coordinate sets for the other entries
%
% the set of RNA segment PDB files can be generated by the Rosetta server
% Rosie FarFar: http://rosie.graylab.jhu.edu/documentation/rna_denovo
%
% all PDB files of the RNA segments must be in the same directory and this
% directory must not contain any other file with extension .pdb
%
% stem  nucleotide indices for the stem, for instance: [1-7 31:-1:25]
% reso  library resolution [Å], maximum coordinate rmsd between stem
%       structures grouped into one cluster
%
% G. Jeschke, 24.12.2017

global model

mydir = pwd;
[fname,pname]=uigetfile('*.pdb','Select paradigm RNA segment PDB file');
if isequal(fname,0) || isequal(pname,0)
    add_msg_board('RNA stem library generation cancelled by user');
    return
else
    [msg,snum] = add_pdb(fullfile(pname,fname));
    if msg.error
        add_msg_board(sprintf('ERROR in reading paradigm PDB file: %s. Aborting.',msg.text));
        return
    end
    cd(pname);
    if ~exist('sel','var') || isempty(sel)
        RNA_list = dir('*.pdb');
    else
        for ks = 1:length(sel)
            mtag = sprintf('%i',sel(ks));
            preamb = 'R_000000';
            RNA_list(ks).name = sprintf('%s%s.pdb',preamb(1:8-length(mtag)),mtag);
        end
    end
end

set(gcf,'Pointer','watch');

ndecoys = length(RNA_list);
stems(1).coor = model.structures{snum}(1).xyz{1};
[atnum,~] = size(stems(1).coor);
stem_def.ntf = upper(model.structures{snum}(1).sequence(1));
ntnum = length(model.structures{snum}(1).sequence);
stem_def.ntl = upper(model.structures{snum}(1).sequence(ntnum));
stem_def.atomtags = cell(1,atnum);
poi = 0;
for knt = 1:ntnum
    atags =  model.structures{snum}(1).residues{1}.info(knt).atom_tags;
    atag = '?';
    apoi = 0;
    while ~isempty(atag)
        apoi = apoi + 1;
        atag = id2tag(apoi,atags);
        if ~isempty(atag)
            poi = poi + 1;
            stem_def.atomtags{poi} = atag;
        end
    end
end

if poi ~= atnum
    fprintf(2,'Warning: Atom number mismatch %i,%i.\n',poi,atnum);
end

load nuclib_5

stem = analyze_RNA_links(snum,shortfrag);
stems(1).previous = stem.previous;
stems(1).prev_coor = stem.prev_coor;
stems(1).next = stem.next;
stems(1).next_coor = stem.next_coor;
stems(1).ptaf = stem.ptaf;
stems(1).ptal = stem.ptal;
stems(1).ptransmat = stem.ptransmat;
stems(1).ntransmat = stem.ntransmat;


tic,
for kd = 2:ndecoys
    [msg,snum] = add_pdb(RNA_list(kd).name);
    if msg.error
        add_msg_board(sprintf('ERROR: PDB file %s could not be read (%s). Aborting.',RNA_list(kd).name,msg.text));
        cd(mydir);
        set(gcf,'Pointer','arrow');
        return
    end
    stems(kd).coor = model.structures{snum}(1).xyz{1};
    stem = analyze_RNA_links(snum,shortfrag);
    stems(kd).previous = stem.previous;
    stems(kd).prev_coor = stem.prev_coor;
    stems(kd).next = stem.next;
    stems(kd).next_coor = stem.next_coor;
    stems(kd).ptaf = stem.ptaf;
    stems(kd).ptal = stem.ptal;
    stems(kd).ptransmat = stem.ptransmat;
    stems(kd).ntransmat = stem.ntransmat;
end
% toc,
set(gcf,'Pointer','arrow');

% disp('Finished');

defname = 'stem_lib.mat';
[filename, pathname] = uiputfile(defname, 'Save stem library in MMM format');
if isequal(filename,0) || isequal(pathname,0)
    message.text='Saving of stem library cancelled by user';
    message.error=1;
else
    fname=fullfile(pathname, filename);
    msg=sprintf('Stem library saved as: %s',fname);
    add_msg_board(msg);
    save(fname,'stem_def','stems');
end


